#!/usr/bin/env node

const {
    compose,
    not,
    converge,
    test: testRegex,
    unary,
} = require('ramda');

const {
    InvalidModuleConfigError,
} = require('../utils/exceptions');

const {
    log,
    parseArgs,
    getConfig,
    isDirectory,
    isFile,
    getTemplatePath,
    importModuleConfig,
    joinPathWith,
    renderTemplateString,
    createFile,
    getTemplateFiles,
    renderTemplateFromFile,
    toOutputTemplatePath,
} = require('../utils/helpers');

const templatePath =
    getTemplatePath(getConfig('boilerplateName'));

if(!templatePath) {
    throw new InvalidModuleConfigError(
        'Invalid boilerplate directory'
    );
}

const {
    ignore: ignoredRegex,
    data: templateData,
    preventExecution = false,
} = importModuleConfig(templatePath);

if(preventExecution) {
    return;
}

getTemplateFiles(templatePath)
    .filter(isFile)
    .filter(compose(not, testRegex(ignoredRegex)))
    .map(unary(
        converge(createFile, [
            unary(renderTemplateFromFile(templateData)),
            unary(toOutputTemplatePath(templatePath)),
        ]),
    ));

